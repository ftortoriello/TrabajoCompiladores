
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ar.edu.unnoba.compilador;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.io.FileReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MiParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return MiParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public MiParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MiParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MiParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\012\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\003\000\002\003\003\000" +
    "\002\003\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\023\000\012\005\006\010\004\013\005\014\011\001" +
    "\002\000\012\005\006\010\004\013\005\014\011\001\002" +
    "\000\016\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\011" +
    "\ufffa\001\002\000\012\005\006\010\004\013\005\014\011" +
    "\001\002\000\014\002\000\004\014\005\015\006\013\007" +
    "\016\001\002\000\004\002\012\001\002\000\016\002\ufff9" +
    "\004\ufff9\005\ufff9\006\ufff9\007\ufff9\011\ufff9\001\002\000" +
    "\004\002\001\001\002\000\012\005\006\010\004\013\005" +
    "\014\011\001\002\000\012\005\006\010\004\013\005\014" +
    "\011\001\002\000\012\005\006\010\004\013\005\014\011" +
    "\001\002\000\012\005\006\010\004\013\005\014\011\001" +
    "\002\000\016\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc" +
    "\011\ufffc\001\002\000\016\002\ufffe\004\ufffe\005\ufffe\006" +
    "\013\007\016\011\ufffe\001\002\000\016\002\uffff\004\uffff" +
    "\005\uffff\006\013\007\016\011\uffff\001\002\000\016\002" +
    "\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\011\ufffd\001\002" +
    "\000\016\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\011" +
    "\ufff8\001\002\000\014\004\014\005\015\006\013\007\016" +
    "\011\025\001\002\000\016\002\ufffb\004\ufffb\005\ufffb\006" +
    "\ufffb\007\ufffb\011\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\023\000\006\002\007\003\006\001\001\000\004\003" +
    "\023\001\001\000\002\001\001\000\004\003\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\021\001\001\000\004\003\020" +
    "\001\001\000\004\003\017\001\001\000\004\003\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MiParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MiParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MiParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        System.out.println("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MiParser$actions {
  private final MiParser parser;

  /** Constructor */
  CUP$MiParser$actions(MiParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MiParser$do_action_part00000000(
    int                        CUP$MiParser$act_num,
    java_cup.runtime.lr_parser CUP$MiParser$parser,
    java.util.Stack            CUP$MiParser$stack,
    int                        CUP$MiParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MiParser$result;

      /* select the action based on the action number */
      switch (CUP$MiParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= expression EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		RESULT = start_val;
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MiParser$parser.done_parsing();
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // expression ::= expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            System.out.println("REGLA 0: expr -> expr EOF");
            RESULT = e;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= expr MAS expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            System.out.println("REGLA 1.1: expr -> expr MAS expr");
            RESULT = e1+"+"+e2;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= expr MENOS expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            System.out.println("REGLA 1.2: expr -> expr MENOS expr");
            RESULT = e1+"-"+e2;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= expr MULT expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            System.out.println("REGLA 1.3: expr -> expr MULT expr");
            RESULT = e1+"*"+e2;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= expr DIV expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            System.out.println("REGLA 1.4: expr -> expr DIV expr");
            RESULT = e1+"*"+e2;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= PAR_ABRE expr PAR_CIERRA 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            System.out.println("REGLA 1.5: expr -> ( expr )");
            RESULT = "("+e+")";
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= IDENTIFICADOR 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            System.out.println("REGLA 1.6: expr -> IDENTIFICADOR)");
            RESULT = id;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= ENTERO 
            {
              String RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String ent = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            System.out.println("REGLA 1.6: expr -> ENTERO)");
            RESULT = ent;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= MENOS expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            System.out.println("REGLA 1.7: expr -> MENOS expr)");
            RESULT = "-"+e;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MiParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MiParser$do_action(
    int                        CUP$MiParser$act_num,
    java_cup.runtime.lr_parser CUP$MiParser$parser,
    java.util.Stack            CUP$MiParser$stack,
    int                        CUP$MiParser$top)
    throws java.lang.Exception
    {
              return CUP$MiParser$do_action_part00000000(
                               CUP$MiParser$act_num,
                               CUP$MiParser$parser,
                               CUP$MiParser$stack,
                               CUP$MiParser$top);
    }
}

}
