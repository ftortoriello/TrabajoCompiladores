package ar.edu.unnoba.compilador.sintaxis;

import ar.edu.unnoba.compilador.ast.base.Bloque;
import ar.edu.unnoba.compilador.ast.base.Encabezado;
import ar.edu.unnoba.compilador.ast.base.Nodo;
import ar.edu.unnoba.compilador.ast.base.Programa;
import ar.edu.unnoba.compilador.ast.expresiones.Expresion;
import ar.edu.unnoba.compilador.ast.expresiones.OperadorCmp;
import ar.edu.unnoba.compilador.ast.expresiones.Tipo;
import ar.edu.unnoba.compilador.ast.expresiones.binarias.OperacionBinaria;
import ar.edu.unnoba.compilador.ast.expresiones.binarias.aritmeticas.Division;
import ar.edu.unnoba.compilador.ast.expresiones.binarias.aritmeticas.Multiplicacion;
import ar.edu.unnoba.compilador.ast.expresiones.binarias.aritmeticas.Resta;
import ar.edu.unnoba.compilador.ast.expresiones.binarias.aritmeticas.Suma;
import ar.edu.unnoba.compilador.ast.expresiones.binarias.logicas.Conjuncion;
import ar.edu.unnoba.compilador.ast.expresiones.binarias.logicas.Disyuncion;
import ar.edu.unnoba.compilador.ast.expresiones.binarias.relaciones.Relacion;
import ar.edu.unnoba.compilador.ast.expresiones.unarias.aritmeticas.NegacionAritmetica;
import ar.edu.unnoba.compilador.ast.expresiones.unarias.logicas.NegacionLogica;
import ar.edu.unnoba.compilador.ast.expresiones.valor.Cadena;
import ar.edu.unnoba.compilador.ast.expresiones.valor.Identificador;
import ar.edu.unnoba.compilador.ast.expresiones.valor.InvocacionFuncion;
import ar.edu.unnoba.compilador.ast.expresiones.valor.Literal;
import ar.edu.unnoba.compilador.ast.sentencias.Asignacion;
import ar.edu.unnoba.compilador.ast.sentencias.Sentencia;
import ar.edu.unnoba.compilador.ast.sentencias.control.Continuar;
import ar.edu.unnoba.compilador.ast.sentencias.control.Retorno;
import ar.edu.unnoba.compilador.ast.sentencias.control.Salir;
import ar.edu.unnoba.compilador.ast.sentencias.declaracion.*;
import ar.edu.unnoba.compilador.ast.sentencias.iteracion.Mientras;
import ar.edu.unnoba.compilador.ast.sentencias.iteracion.Para;
import ar.edu.unnoba.compilador.ast.sentencias.seleccion.CasoCuando;
import ar.edu.unnoba.compilador.ast.sentencias.seleccion.Cuando;
import ar.edu.unnoba.compilador.ast.sentencias.seleccion.SiEntonces;
import ar.edu.unnoba.compilador.ast.sentencias.seleccion.SiEntoncesSino;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.Symbol;

import java.util.ArrayList;
import java.util.List;

class Parser;

parser code
{:
    @Override
    public void syntax_error(Symbol s) {
        ComplexSymbolFactory.ComplexSymbol cs = (ComplexSymbolFactory.ComplexSymbol) s;
        String pos = Util.getPosicion(cs.getLeft(), cs.getRight());
        String msg = "";
        if (!pos.equals("")) msg = pos + " - ";
        msg = msg + "Error sintáctico en el símbolo " + cs.getName();
        System.err.println(msg);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s) {
    }
:};

terminal PR_MAIN_IS, PR_END_PUNTO,
    PR_VARIABLE, PR_IS, PR_FUNCTION, PR_RETURN,
    PR_BEGIN, PR_END,
    PR_IF, PR_THEN, PR_ELSE, PR_WHEN, PR_WHILE,
    PR_FOR, PR_FROM, PR_TO, PR_BY, PR_DO, PR_BREAK, PR_CONTINUE,
    OP_LOG_BIN_OR, OP_LOG_BIN_AND, OP_LOG_UNA_NOT,
    OP_ARIT_SUMA, OP_ARIT_RESTA, OP_ARIT_PROD, OP_ARIT_DIV,
    PAR_ABRE, PAR_CIERRA, COMA, PUNTO_Y_COMA, IGUAL;

terminal String IDENTIFICADOR, TIPO_DE_DATO,
    LIT_BOOLEANO, LIT_FLOTANTE, LIT_ENTERO, CADENA,
    OP_COMPARACION,
    PR_WRITELN, PR_WRITE, PR_READ_INTEGER, PR_READ_FLOAT, PR_READ_BOOLEAN;

nonterminal Programa programa;

nonterminal List<Declaracion> encabezado;
nonterminal DecVar dec_var;
nonterminal DecFun dec_fun;
nonterminal List<Param> lst_params, lst_params_def;
nonterminal Param param, param_def;

nonterminal Bloque cuerpo_programa, bloque;
nonterminal List<Nodo> lst_sentencias;
nonterminal Nodo sentencia;

nonterminal Sentencia asignacion, si_entonces, cuando, para, mientras, control;
nonterminal List<CasoCuando> bloque_cuando;

nonterminal Expresion expresion, disyuncion, conjuncion, negacion_logica,
    relacion, adicion, termino, negacion_aritmetica,
    factor, literal, invocacion_funcion;

nonterminal List<Expresion> lst_args;

precedence left PR_ELSE, PR_IS;

start with programa;

programa ::=
        encabezado:decs cuerpo_programa:cpoProg {:
            Encabezado enc = new Encabezado(decs);
            enc.setPosicion(decsxleft, decsxright);
            Programa prog = new Programa("Programa", enc, cpoProg);
            prog.setPosicion(decsxleft, cpoProgxright);
            RESULT = prog;
        :} |
        cuerpo_programa:cpoProg {:
            Encabezado enc = new Encabezado(new ArrayList<>());
            Programa prog = new Programa("Programa", enc, cpoProg);
            prog.setPosicion(cpoProgxleft, cpoProgxright);
            RESULT = prog;
        :};

cuerpo_programa ::=
        PR_MAIN_IS:main lst_sentencias:sentencias PR_END_PUNTO:end {:
            final boolean esBloquePrincipal = true;
            Bloque cuerpoPrograma = new Bloque("Bloque principal", sentencias, esBloquePrincipal);
            cuerpoPrograma.setPosicion(mainxleft, endxright);
            RESULT = cuerpoPrograma;
        :} |
        PR_MAIN_IS:main PR_END_PUNTO:end {:
            final boolean esBloquePrincipal = true;
            Bloque cuerpoPrograma = new Bloque("Bloque principal (vacío)", esBloquePrincipal);
            cuerpoPrograma.setPosicion(mainxleft, endxright);
            RESULT = cuerpoPrograma;
        :};

encabezado ::=
        encabezado:decs dec_var:decVar PUNTO_Y_COMA {:
            decs.add(decVar);
            RESULT = decs;
        :} |
        encabezado:decs dec_fun:decFun {:
            decs.add(decFun);
            RESULT = decs;
        :} |
        dec_var:decVar PUNTO_Y_COMA {:
            List<Declaracion> decs = new ArrayList<>();
            decs.add(decVar);
            RESULT = decs;
        :} |
        dec_fun:decFun {:
            List<Declaracion> decs = new ArrayList<>();
            decs.add(decFun);
            RESULT = decs;
        :};

dec_var ::=
        PR_VARIABLE:var IDENTIFICADOR:id PR_IS TIPO_DE_DATO:td {:
            Identificador ident = new Identificador(id, Tipo.getTipoDato(td));
            ident.setPosicion(idxleft, idxright);
            DecVar decVar = new DecVar(ident);
            decVar.setPosicion(varxleft, tdxright);
            RESULT = decVar;
        :} |
        PR_VARIABLE:var IDENTIFICADOR:id PR_IS TIPO_DE_DATO:td IGUAL expresion:expr {:
            Identificador ident = new Identificador(id, Tipo.getTipoDato(td));
            ident.setPosicion(idxleft, idxright);
            DecVarIni decVarIni = new DecVarIni(ident, expr);
            decVarIni.setPosicion(varxleft, exprxright);
            RESULT = decVarIni;
        :};

dec_fun ::=
        PR_FUNCTION:fun IDENTIFICADOR:id PAR_ABRE PAR_CIERRA PR_RETURN TIPO_DE_DATO:td bloque:bloque PUNTO_Y_COMA:pyc {:
            Identificador ident = new Identificador(id, Tipo.getTipoDato(td));
            ident.setPosicion(idxleft, idxright);
            DecFun decFun = new DecFun(ident, bloque);
            decFun.setPosicion(funxleft, pycxright);
            RESULT = decFun;
        :} |
        PR_FUNCTION:fun IDENTIFICADOR:id PAR_ABRE lst_params:params PAR_CIERRA PR_RETURN TIPO_DE_DATO:td bloque:bloque PUNTO_Y_COMA:pyc {:
            Identificador ident = new Identificador(id, Tipo.getTipoDato(td));
            ident.setPosicion(idxleft, idxright);
            DecFun decFun = new DecFun(ident, params, bloque);
            decFun.setPosicion(funxleft, pycxright);
            RESULT = decFun;
        :};

lst_params ::=
        param:param {:
            List<Param> params = new ArrayList<>();
            params.add(param);
            RESULT = params;
        :} |
        param:param COMA lst_params:params {:
            params.add(param);
            RESULT = params;
        :} |
        lst_params_def:params {:
          RESULT = params;
        :};

lst_params_def ::=
        param_def:param COMA lst_params_def:params {:
            params.add(param);
            RESULT = params;
        :} |
        param_def:param {:
            List<Param> params = new ArrayList<>();
            params.add(param);
            RESULT = params;
        :};

param ::= IDENTIFICADOR:id PR_IS TIPO_DE_DATO:td {:
            Identificador ident = new Identificador(id, Tipo.getTipoDato(td));
            ident.setPosicion(idxleft, idxright);
            Param param = new Param(ident);
            param.setPosicion(idxleft, tdxright);
            RESULT = param;
        :};

param_def ::= IDENTIFICADOR:id PR_IS TIPO_DE_DATO:td IGUAL expresion:expr {:
            Identificador ident = new Identificador(id, Tipo.getTipoDato(td));
            ident.setPosicion(idxleft, idxright);
            ParamDef paramDef = new ParamDef(ident, expr);
            paramDef.setPosicion(idxleft, exprxright);
            RESULT = paramDef;
        :};

bloque ::=
        sentencia:sent {:
            List<Nodo> sentencias = new ArrayList<>();
            sentencias.add(sent);
            final boolean esBloquePrincipal = false;
            Bloque bloque = new Bloque("Bloque simple\n(una sentencia)", sentencias, esBloquePrincipal);
            bloque.setPosicion(sentxleft, sentxright);
            RESULT = bloque;
        :} |
        PR_BEGIN:begin lst_sentencias:sentencias PR_END:end {:
            final boolean esBloquePrincipal = false;
            Bloque bloque = new Bloque("Bloque compuesto\n(múltiples sentencias)", sentencias, esBloquePrincipal);
            bloque.setPosicion(beginxleft, endxright);
            RESULT = bloque;
        :};

lst_sentencias ::=
        lst_sentencias:sentencias sentencia:sent PUNTO_Y_COMA {:
            sentencias.add(sent);
            RESULT = sentencias;
        :} |
        sentencia:sent PUNTO_Y_COMA {:
            List<Nodo> sentencias = new ArrayList<>();
            sentencias.add(sent);
            RESULT = sentencias;
        :};

sentencia ::=
        asignacion:asig {:
            RESULT = asig;
        :} |
        invocacion_funcion:invo_fun {:
            RESULT = invo_fun;
        :} |
        dec_var:dec_var {:
            RESULT = dec_var;
        :} |
        si_entonces:si {:
            RESULT = si;
        :} |
        cuando:cuando {:
            RESULT = cuando;
        :} |
        para:para {:
            RESULT = para;
        :} |
        mientras:mientras {:
            RESULT = mientras;
        :} |
        control:ctrl {:
            RESULT = ctrl;
        :};

asignacion ::=
        IDENTIFICADOR:id IGUAL expresion:expr {:
            Identificador ident = new Identificador(id);
            ident.setPosicion(idxleft, idxright);
            Asignacion asig = new Asignacion(ident, expr);
            asig.setPosicion(idxleft, exprxright);
            RESULT = asig;
       :};

si_entonces ::=
        PR_IF:i expresion:cond PR_THEN bloque:bloque {:
            SiEntonces se = new SiEntonces(cond, bloque);
            se.setPosicion(ixleft, bloquexright);
            RESULT = se;
        :} |
        PR_IF:i expresion:cond PR_THEN bloque:bloqueSi PR_ELSE bloque:bloqueSino {:
            SiEntoncesSino ses = new SiEntoncesSino(cond, bloqueSi, bloqueSino);
            ses.setPosicion(ixleft, bloqueSinoxright);
            RESULT = ses;
        :};

cuando ::=
        PR_WHEN:w expresion:cond bloque_cuando:bloqueCuando {:
            Cuando cuando = new Cuando(cond, bloqueCuando);
            cuando.setPosicion(wxleft, bloqueCuandoxright);
            RESULT = cuando;
        :} |
        PR_WHEN:w expresion:cond bloque_cuando:bloqueCuando PR_ELSE bloque:bloqueSino {:
            Cuando cuando = new Cuando(cond, bloqueCuando, bloqueSino);
            cuando.setPosicion(wxleft, bloqueSinoxright);
            RESULT = cuando;
        :};

bloque_cuando ::=
        PR_IS:is OP_COMPARACION:op expresion:cond PR_THEN bloque:bloque {:
            List<CasoCuando> bloqueCuando = new ArrayList<>();
            CasoCuando caso = new CasoCuando(OperadorCmp.getTipoOpCmp(op), cond, bloque);
            caso.setPosicion(isxleft, bloquexright);
            bloqueCuando.add(caso);
            RESULT = bloqueCuando;
        :} |
        PR_IS:is OP_COMPARACION:op expresion:cond PR_THEN bloque:bloque bloque_cuando:bloqueCuando {:
            CasoCuando caso = new CasoCuando(OperadorCmp.getTipoOpCmp(op), cond, bloque);
            caso.setPosicion(isxleft, bloquexright);
            bloqueCuando.add(caso);
            RESULT = bloqueCuando;
        :};

para ::=
        PR_FOR:f IDENTIFICADOR:id PR_FROM LIT_ENTERO:numIni PR_TO LIT_ENTERO:numFin PR_DO bloque:bloque {:
            final int saltoPorDefecto = 1;
            Identificador ident = new Identificador(id);
            ident.setPosicion(idxleft, idxright);
            Para para = new Para(ident, Integer.parseInt(numIni),
                                Integer.parseInt(numFin), saltoPorDefecto, bloque);
            para.setPosicion(fxleft, bloquexright);
            RESULT = para;
        :} |
        PR_FOR:f IDENTIFICADOR:id PR_FROM LIT_ENTERO:numIni PR_TO LIT_ENTERO:numFin PR_BY LIT_ENTERO:salto PR_DO bloque:bloque {:
            Identificador ident = new Identificador(id);
            ident.setPosicion(idxleft, idxright);
            Para para = new Para(ident, Integer.parseInt(numIni),
                                Integer.parseInt(numFin), Integer.parseInt(salto), bloque);
            para.setPosicion(fxleft, bloquexright);
            RESULT = para;
        :};

mientras ::=
        PR_WHILE:w expresion:cond PR_DO bloque:bloque {:
            Mientras mientras = new Mientras(cond, bloque);
            mientras.setPosicion(wxleft, bloquexright);
            RESULT = mientras;
        :};

control ::=
        PR_RETURN:r expresion:expr {:
            Retorno ret = new Retorno(expr);
            ret.setPosicion(rxleft, exprxright);
            RESULT = ret;
        :} |
        PR_BREAK:b {:
            Salir salir = new Salir();
            salir.setPosicion(bxleft, bxright);
            RESULT = salir;
        :} |
        PR_CONTINUE:c {:
            Continuar ctn = new Continuar();
            ctn.setPosicion(cxleft, cxright);
            RESULT = ctn;
        :};

// Pongo este "alias" porque queda raro llamar a la expresión disyunción en
// las otras reglas, pero tampoco quiero renombrar a la disyunción expresión.
expresion ::=
        disyuncion:d {:
            RESULT = d;
        :};

disyuncion ::=
        disyuncion:d OP_LOG_BIN_OR conjuncion:con {:
            Disyuncion disy = new Disyuncion(d, con);
            disy.setPosicion(dxleft, conxright);
            RESULT = disy;
        :} |
        conjuncion:con {:
            RESULT = con;
        :};

conjuncion ::=
       conjuncion:con OP_LOG_BIN_AND negacion_logica:neg {:
            Conjuncion conjun = new Conjuncion(con, neg);
            conjun.setPosicion(conxleft, negxright);
            RESULT = conjun;
       :} |
       negacion_logica:neg {:
            RESULT = neg;
       :};

negacion_logica ::=
        OP_LOG_UNA_NOT:n negacion_logica:neg {:
            NegacionLogica negLog = new NegacionLogica(neg);
            negLog.setPosicion(nxleft, negxright);
            RESULT = negLog;
        :} |
        relacion:relacion {:
            RESULT = relacion;
        :};

relacion ::=
        adicion:adicionIzq OP_COMPARACION:op adicion:adicionDer {:
            OperacionBinaria rel = Relacion.getClaseRel(OperadorCmp.getTipoOpCmp(op), adicionIzq, adicionDer);
            rel.setPosicion(adicionIzqxleft, adicionDerxright);
            RESULT = rel;
        :} |
        adicion:adicion {:
            RESULT = adicion;
        :};

adicion ::=
        adicion:adicion OP_ARIT_SUMA termino:termino {:
            Suma suma = new Suma(adicion, termino);
            suma.setPosicion(adicionxleft, terminoxright);
            RESULT = suma;
        :} |
        adicion:adicion OP_ARIT_RESTA termino:termino {:
            Resta resta = new Resta(adicion, termino);
            resta.setPosicion(adicionxleft, terminoxright);
            RESULT = resta;
        :} |
        termino:termino {:
            RESULT = termino;
        :};

termino ::=
        termino:termino OP_ARIT_PROD negacion_aritmetica:neg {:
            Multiplicacion multi = new Multiplicacion(termino, neg);
            multi.setPosicion(terminoxleft, negxright);
            RESULT = multi;
        :} |
        termino:termino OP_ARIT_DIV negacion_aritmetica:neg {:
            Division divi = new Division(termino, neg);
            divi.setPosicion(terminoxleft, negxright);
            RESULT = divi;
        :} |
        negacion_aritmetica:negacion_aritmetica {:
            RESULT = negacion_aritmetica;
        :};

negacion_aritmetica ::=
        OP_ARIT_RESTA:r negacion_aritmetica:neg {:
            NegacionAritmetica negArit = new NegacionAritmetica(neg);
            negArit.setPosicion(rxleft, negxright);
            RESULT = negArit;
        :} |
        factor:factor {:
            RESULT = factor;
        :};

factor ::=
        literal:lit {:
            RESULT = lit;
        :} |
        IDENTIFICADOR:id {:
            Identificador ident = new Identificador(id);
            ident.setPosicion(idxleft, idxright);
            RESULT = ident;
        :} |
        invocacion_funcion:invo {:
            RESULT = invo;
        :} |
        PAR_ABRE expresion:expr PAR_CIERRA {:
            RESULT = expr;
        :};

literal ::=
        LIT_ENTERO:litInt {:
            Literal lit = new Literal(litInt, Tipo.INTEGER);
            lit.setPosicion(litIntxleft, litIntxright);
            RESULT = lit;
        :} |
        LIT_FLOTANTE:litFloat {:
            Literal lit = new Literal(litFloat, Tipo.FLOAT);
            lit.setPosicion(litFloatxleft, litFloatxright);
            RESULT = lit;
        :} |
        LIT_BOOLEANO:litBoolean {:
            Literal lit = new Literal(litBoolean, Tipo.BOOLEAN);
            lit.setPosicion(litBooleanxleft, litBooleanxright);
            RESULT = lit;
        :};

invocacion_funcion ::=
        PR_WRITELN:idfun PAR_ABRE expresion:expr PAR_CIERRA:cierre {:
            List<Expresion> params = new ArrayList<>();
            params.add(expr);
            InvocacionFuncion invo = new InvocacionFuncion(idfun, params, Tipo.UNKNOWN);
            invo.setPosicion(idfunxleft, cierrexright);
            RESULT = invo;
        :} |
        PR_WRITELN:idfun PAR_ABRE CADENA:c PAR_CIERRA:cierre {:
            List<Expresion> params = new ArrayList<>();
            params.add(new Cadena(c));
            InvocacionFuncion invo = new InvocacionFuncion(idfun, params, Tipo.UNKNOWN);
            invo.setPosicion(idfunxleft, cierrexright);
            RESULT = invo;
        :} |
        PR_WRITE:idfun PAR_ABRE expresion:expr PAR_CIERRA:cierre {:
            List<Expresion> params = new ArrayList<>();
            params.add(expr);
            InvocacionFuncion invo = new InvocacionFuncion(idfun, params, Tipo.UNKNOWN);
            invo.setPosicion(idfunxleft, cierrexright);
            RESULT = invo;
        :} |
        PR_WRITE:idfun PAR_ABRE CADENA:c PAR_CIERRA:cierre {:
            List<Expresion> params = new ArrayList<>();
            params.add(new Cadena(c));
            InvocacionFuncion invo = new InvocacionFuncion(idfun, params, Tipo.UNKNOWN);
            invo.setPosicion(idfunxleft, cierrexright);
            RESULT = invo;
        :} |
        PR_READ_INTEGER:idfun PAR_ABRE PAR_CIERRA:cierre {:
            InvocacionFuncion invo = new InvocacionFuncion(idfun, Tipo.INTEGER);
            invo.setPosicion(idfunxleft, cierrexright);
            RESULT = invo;
        :} |
        PR_READ_FLOAT:idfun PAR_ABRE PAR_CIERRA:cierre {:
            InvocacionFuncion invo = new InvocacionFuncion(idfun, Tipo.FLOAT);
            invo.setPosicion(idfunxleft, cierrexright);
            RESULT = invo;
        :} |
        PR_READ_BOOLEAN:idfun PAR_ABRE PAR_CIERRA:cierre {:
            InvocacionFuncion invo = new InvocacionFuncion(idfun, Tipo.BOOLEAN);
            invo.setPosicion(idfunxleft, cierrexright);
            RESULT = invo;
        :} |
        IDENTIFICADOR:idfun PAR_ABRE lst_args:args PAR_CIERRA:cierre {:
            final boolean esPredefinida = false;
            InvocacionFuncion invo = new InvocacionFuncion(idfun, args, Tipo.UNKNOWN, esPredefinida);
            invo.setPosicion(idfunxleft, cierrexright);
            RESULT = invo;
        :};

// Expresiones que se pasan como parámetro a una función
lst_args ::=
        lst_args:args COMA expresion:arg {:
            args.add(arg);
            RESULT = args;
        :} |
        expresion:arg {:
            List<Expresion> args = new ArrayList<>();
            args.add(arg);
            RESULT = args;
        :} |
        {:
            // Para que acepte la producción cuando no se pasa ningún argumento,
            // y a la vez genere una lista vacía para pasarle al constructor.
            List<Expresion> args = new ArrayList<>();
            RESULT = args;
        :};
