package ar.edu.unnoba.compilador;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.io.FileReader;
import java.util.logging.Level;
import java.util.logging.Logger;

class MiParser;

parser code
{:
    public void syntax_error(Symbol s) {
        System.out.println("Error en la línea "+ (s.left+1)+ " Columna "+ s.right+ ". Símbolo '"
        +s.value+"'. Símbolo n° "+s.sym+ " no reconocido." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.out.println("Error en la línea "+ (s.left+1)+ " Columna "+ s.right+ ". Símbolo '"
        +s.value+"'. Símbolo n° "+s.sym+ " no reconocido." );
    }

:};

terminal String IDENTIFICADOR,
    OP_ARIT_SUMA_O_RESTA, OP_ARIT_PROD_O_DIV, OP_COMPARACION,
    OP_LOG_BIN_OR, OP_LOG_BIN_AND, OP_LOG_UNA_NOT,
    PAR_ABRE, PAR_CIERRA, PUNTO_Y_COMA, IGUAL,
    PR_IF, PR_THEN, PR_ELSE, PR_WHILE, PR_DO,
    PR_FOR, PR_FROM, PR_TO, PR_BY, PR_WHEN,
    PR_MAIN_IS, PR_END_PUNTO, PR_VARIABLE, PR_IS,
    PR_FUNCTION, PR_RETURN, PR_COMA,
    PR_BEGIN, PR_END, PR_CONTINUE, PR_BREAK,
    TIPO_DE_DATO, CTE_BOOLEANA, ENTERO, FLOTANTE;

nonterminal String programa, cuerpo,
    lst_decs_vars_y_funcs, dec_var, dec_fun, lst_args, arg,
    estructura_condicional_if, estructura_condicional_if_else, estructura_condicional_when,
    estructura_iterativa_while, estructura_iterativa_for,
    sentencia, asignacion, expresion, comparacion,
    invocacion_funcion, lst_terminos, termino,
    expresion_logica_or, expresion_logica_and,
    op_aritmetica_suma_resta, op_aritmetica_producto_division,
    numero_constante;

// Precedencia de operadores. Ni idea si está bien así, todavía no lo puedo probar
// FIXME: operador unario "-", ¿cómo diferenciarlo de la resta?
precedence left OP_LOG_BIN_OR, OP_ARIT_SUMA_O_RESTA;
precedence left OP_LOG_BIN_AND, OP_ARIT_PROD_O_DIV;
precedence left OP_LOG_UNA_NOT;

// Hay un conflicto de shift/reduce en el if porque es ambiguo.
// Con esto hace el shift (busca leer lo máx. posible, o sea el else).
// FIXME: ver si se puede encontrar una regla no ambigua.
// precedence nonassoc PR_ELSE;

start with cuerpo;

// TODO: ver si se puede encontrar una forma coherente de numerar las reglas...
// TODO: bloques begin/end
programa ::=
        lst_decs_vars_y_funcs:lst PR_MAIN_IS:is cuerpo:cuerpo PR_END_PUNTO:end {:
            RESULT = String.join(" ", lst, is, cuerpo, end);
            System.out.println("REGLA 0 -> lst_decs_vars_y_funcs PR_MAIN_IS cuerpo PR_END_PUNTO (" + RESULT + ") -> programa");
        :};

lst_decs_vars_y_funcs ::=
        dec_var:dec_var lst_decs_vars_y_funcs:lst {:
             RESULT = String.join(" ", dec_var, lst);
             System.out.println("REGLA 1.1: dec_var (" + RESULT + ") -> lst_decs_vars_y_funcs");
        :} |
        dec_fun:dec_fun lst_decs_vars_y_funcs:lst {:
            RESULT = String.join(" ", dec_fun, lst);
            System.out.println("REGLA 1.2: dec_fun (" + RESULT + ") -> lst_decs_vars_y_funcs");
        :} |
        dec_var:dec_var {:
            RESULT = dec_var;
            System.out.println("REGLA 1.3: dec_var (" + RESULT + ") -> lst_decs_vars_y_funcs");
        :} |
        dec_fun:dec_fun {:
            RESULT = dec_fun;
            System.out.println("REGLA 1.4: dec_fun (" + RESULT + ") -> lst_decs_vars_y_funcs");
        :};

// TODO: En el caso de tratarse de una variable global, dicha expresión no deberá admitir
// invocaciones a funciones como parte de la expresión (no ocurriendo lo mismo con
// variables locales a un bloque de sentencias o función, donde dicha restricción no existe).
dec_var ::=
        PR_VARIABLE:pr_var arg:arg PUNTO_Y_COMA:pyc {:
             RESULT = String.join(" ", pr_var, arg, pyc);
             System.out.println("REGLA 1.3.1: PR_VARIABLE arg PUNTO_Y_COMA (" + RESULT + ") -> dec_var");
        :};

dec_fun ::=
        PR_FUNCTION:funcion IDENTIFICADOR:id PAR_ABRE:pa PAR_CIERRA:pc PR_RETURN:ret TIPO_DE_DATO:td {:
            RESULT = String.join(" ", funcion, id, pa, pc, ret, td);
            System.out.println("REGLA 1.4.1: PR_FUNCTION IDENTIFICADOR PAR_ABRE PAR_CIERRA PR_RETURN " +
                                "TIPO_DE_DATO (" + RESULT + ") -> dec_var");
        :} |
        PR_FUNCTION:funcion IDENTIFICADOR:id PAR_ABRE:pa lst_args:lst_args PAR_CIERRA:pc PR_RETURN:ret TIPO_DE_DATO:td {:
            RESULT = String.join(" ", funcion, id, pa, lst_args, pc, ret, td);
            System.out.println("REGLA 1.4.2: PR_FUNCTION IDENTIFICADOR PAR_ABRE lst_args PAR_CIERRA " +
                                "PR_RETURN TIPO_DE_DATO (" + RESULT + ") -> dec_var");
        :};

lst_args ::=
        arg:arg PR_COMA:coma lst_args:lst_args {:
            RESULT = String.join(" ", arg, coma, lst_args);
            System.out.println("REGLA 1.4.2.1: arg PR_COMA lst_Args (" + RESULT + ") -> lst_args");
        :} |
        arg:arg {:
            RESULT = arg;
            System.out.println("REGLA 1.4.2.2: arg (" + RESULT + ") -> lst_args");
        :};

arg ::=
        IDENTIFICADOR:id PR_IS:is TIPO_DE_DATO:td  {:
            RESULT = String.join(" ", id, is, td);
            System.out.println("REGLA 1.3.2.1: IDENTIFICADOR PR_IS TIPO_DE_DATO (" + RESULT + ") -> arg");
        :} |
        IDENTIFICADOR:id PR_IS:is TIPO_DE_DATO:td IGUAL:igual expresion:exp {:
            RESULT = String.join(" ", id, is, td, igual, exp);
            System.out.println("REGLA 1.3.2.2: IDENTIFICADOR PR_IS TIPO_DE_DATO " +
            "IGUAL expresion (" + RESULT + ") -> arg");
        :};

cuerpo ::=
        sentencia:st PUNTO_Y_COMA:pyc cuerpo:cuerpo {:
            RESULT = String.join(" ", st, pyc, cuerpo);
            System.out.println("REGLA 2.1: sentencia cuerpo (" + RESULT + ") -> cuerpo");
        :} |
        sentencia:st PUNTO_Y_COMA:pyc {:
            RESULT = String.join(" ", st, pyc);
            System.out.println("REGLA 2.2: sentencia (" + RESULT + ") -> cuerpo");
        :};

// TODO: agregar las estructuras de control e iteración que definamos
sentencia ::=
        estructura_condicional_if:estruc_if {:
            RESULT = String.join(" ", estruc_if);
            System.out.println("REGLA 2.3.1: estructura_condicional_if (" + RESULT + ") -> sentencia");
        :} |
        estructura_condicional_if_else:estruc_if_else {:
            RESULT = String.join(" ", estruc_if_else);
            System.out.println("REGLA 2.3.2: estructura_condicional_if_else (" + RESULT + ") -> sentencia");
        :} |
        asignacion:asig {:
            RESULT = String.join(" ", asig);
            System.out.println("REGLA 2.3.3: asignacion (" + RESULT + ") -> sentencia");
        :} |
        invocacion_funcion:invo_fun {:
            RESULT = String.join(" ", invo_fun);
            System.out.println("REGLA 2.3.4: invocacion_funcion(" + RESULT + ") -> sentencia");
        :} |
        estructura_iterativa_while:estruc_while {:
            RESULT = String.join(" ", estruc_while);
            System.out.println("REGLA 2.3.5: estructura_iterativa_while (" + RESULT + ") -> sentencia");
        :};

estructura_condicional_if ::=
        PR_IF:pr_if expresion_logica_or:or PR_THEN:pr_then cuerpo:cuerpo PUNTO_Y_COMA:pyc {:
            RESULT = String.join(" ", pr_if, or, pr_then, cuerpo, pyc);
            System.out.println("REGLA 3.1: PR_IF expresion_logica_or PR_THEN cuerpo PUNTO_Y_COMA ("
            + RESULT + ") -> estructura_condicional_if");
        :};

estructura_condicional_if_else ::=
        PR_IF:pr_if expresion_logica_or:or PR_THEN:pr_then cuerpo:cuerpo1 PR_ELSE:pr_else cuerpo:cuerpo2 {:
            RESULT = String.join(" ", pr_if, or, pr_then, cuerpo1, pr_else, cuerpo2);
            System.out.println("REGLA 3.2: PR_IF expresion_logica_or PR_THEN cuerpo PR_ELSE cuerpo ("
            + RESULT + ") -> estructura_condicional_if_else");
        :};

// 14
estructura_condicional_when ::=;

// 15
// while <condición> do <sentencia>;
estructura_iterativa_while ::=
        PR_WHILE:pr_while expresion_logica_or:exp_or PR_DO:pr_do cuerpo:cuerpo {:
            RESULT = String.join(" ", pr_while, exp_or, pr_do, cuerpo);
            System.out.println("REGLA 15.1: PR_WHILE expresion_logica_or PR_DO sentencia (" + RESULT + ")"
            + " -> estructura_iterativa_while");
        :};

// 16
estructura_iterativa_for ::=;

asignacion ::=
        IDENTIFICADOR:id IGUAL:igual expresion:expr {:
            RESULT = String.join(" ", id, igual, expr);
            System.out.println("REGLA 4: IDENTIFICADOR IGUAL expresion (" + RESULT + ") -> asignacion");
        :} |
        IDENTIFICADOR:id IGUAL:igual termino:t {:
            RESULT = String.join(" ", id, igual, t);
            System.out.println("REGLA 4: IDENTIFICADOR IGUAL termino (" + RESULT + ") -> asignacion");
        :};

expresion ::=
        expresion_logica_or:exp_or {:
            RESULT = exp_or;
            System.out.println("REGLA 5.1: expresion_logica_or (" + RESULT + ") -> expresion");
        :} |
        op_aritmetica_suma_resta:op_arit {:
            RESULT = op_arit;
            System.out.println("REGLA 5.2: op_aritmetica_suma_resta (" + RESULT + ") -> expresion");
        :};

// TODO: not
expresion_logica_or ::=
        expresion_logica_and:lst_exp_and OP_LOG_BIN_OR:op expresion_logica_or:expr_or {:
            RESULT = String.join(" ", expr_or, op, lst_exp_and);
            System.out.println("REGLA 6.1: lst_exp_and OP_LOG_BIN_OR expr_or (" + RESULT +") -> expresion_logica_or");
        :} |
        expresion_logica_and:lst_exp_and {:
            RESULT = lst_exp_and;
            System.out.println("REGLA 6.2: expresion_logica_and (" + RESULT + ") -> expresion_logica_or");
        :} |;

expresion_logica_and ::=
        comparacion:cmp OP_LOG_BIN_AND:op expresion_logica_and:exp {:
            RESULT = String.join(" ", cmp, op, exp);
            System.out.println("REGLA 7.1: comparacion OP_LOG_BIN_AND expresion_logica_and (" + RESULT + ") -> expresion_logica_and");
        :} |
        comparacion:cmp {:
            RESULT = cmp;
            System.out.println("REGLA 7.2: comparacion (" + RESULT + ") -> expresion_logica_and");
        :};

comparacion ::=
        termino:t1 OP_COMPARACION:op termino:t2 {:
            RESULT = String.join(" ", t1, op, t2);
            System.out.println("REGLA 8: termino OP_COMPARACION termino (" + RESULT + ") -> comparacion");
    :};

// FIXME: modificar precedencia mediante paréntesis
op_aritmetica_suma_resta ::=
        termino:t1 OP_ARIT_SUMA_O_RESTA:tipo_op op_aritmetica_suma_resta:terminos_restantes {:
            RESULT = String.join(" ", t1, tipo_op, terminos_restantes);
            System.out.println("REGLA 9.1: termino " + tipo_op + " op_aritmetica_suma_resta (" + RESULT + ") -> op_aritmetica_suma_resta");
        :} |
        termino:t1 OP_ARIT_SUMA_O_RESTA:tipo_op termino:t2 {:
            RESULT = String.join(" ", t1, tipo_op, t2);
            System.out.println("REGLA 9.2: termino " + tipo_op + " termino (" + RESULT + ") -> op_aritmetica_suma_resta");
        :} |
        op_aritmetica_producto_division:terminos_restantes {:
            RESULT = terminos_restantes;
            System.out.println("REGLA 9.3: op_aritmetica_producto_division (" + RESULT + ") -> op_aritmetica_suma_resta");
        :};

op_aritmetica_producto_division ::=
        termino:t1 OP_ARIT_PROD_O_DIV:tipo_op op_aritmetica_producto_division:terminos_restantes {:
            RESULT = String.join(" ", t1, tipo_op, terminos_restantes);
            System.out.println("REGLA 10.1: termino " + tipo_op + " op_aritmetica_producto_division (" + RESULT + ") -> op_aritmetica_producto_division");
        :} |
        termino:t1 OP_ARIT_PROD_O_DIV:tipo_op termino:t2 {:
            RESULT = String.join(" ", t1, tipo_op, t2);
            System.out.println("REGLA 10.2: op_aritmetica_producto_division -> termino " + tipo_op + " termino (" + RESULT + ") -> op_aritmetica_producto_division");
        :};

// FIXME: también agregar strings
termino ::=
        numero_constante:num {:
            RESULT = num;
            System.out.println("REGLA 11.1: numero_constante (" + RESULT + ") -> termino");
        :} |
        IDENTIFICADOR:id {:
            RESULT = id;
            System.out.println("REGLA 11.2: IDENTIFICADOR (" + RESULT + ") -> termino");
        :} |
        CTE_BOOLEANA:cte {:
            RESULT = cte;
            System.out.println("REGLA 11.3: CTE_BOOLEANA (" + RESULT + ") -> termino");
        :} |
        invocacion_funcion:fun {:
            RESULT = fun;
            System.out.println("REGLA 11.4: invocacion_funcion (" + RESULT + ") -> termino");
        :};

lst_terminos ::=
        termino:t lst_terminos:lst_t {:
            RESULT = String.join(" ", t, lst_t);
            System.out.println("REGLA 12.1: termino lst_terminos (" + RESULT + ") -> lst_terminos");
        :} |
        termino:t {:
            RESULT = String.join(" ", t);
            System.out.println("REGLA 12.2: termino (" + RESULT + ") -> lst_terminos");
        :};

numero_constante ::=
        ENTERO:num {:
            RESULT = num;
            System.out.println("REGLA 11.1.1: ENTERO (" + RESULT + ") -> numero_constante");
        :} |
        FLOTANTE:num {:
            RESULT = num;
            System.out.println("REGLA 11.1.2: FLOTANTE (" + RESULT + ") -> numero_constante");
        :};

invocacion_funcion ::=
        IDENTIFICADOR:id PAR_ABRE:pa PAR_CIERRA:pc {:
            RESULT = String.join(" ", id, pa, pc);
            System.out.println("REGLA 13.1: IDENTIFICADOR PAR_ABRE PAR_CIERRA (" + RESULT + ") -> invocacion_funcion");
        :} |
        IDENTIFICADOR:id PAR_ABRE:pa lst_terminos:lst_ts PAR_CIERRA:pc {:
            RESULT = String.join(" ", id, pa, lst_ts, pc);
            System.out.println("REGLA 13.2: IDENTIFICADOR PAR_ABRE lst_terminos PAR_CIERRA (" + RESULT + ") -> invocacion_funcion");
        :};